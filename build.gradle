//file:noinspection GroovyAssignabilityCheck
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.gradleup.shadow' version '9.0.0-beta10'
    id 'org.jreleaser' version '1.17.0'
}

group = 'com.xkball'
version = '0.1.1'

test {
    useJUnitPlatform()
}

tasks.register('generateAnnotationProcessorServicesFile'){

//    var target = file("src/main/resources/META-INF/services/javax.annotation.processing.Processor")
//    target.parentFile.mkdirs()
//    target.createNewFile()
//    target.text = ""
//
//    var classesDir = fileTree("src/main/java/com/xkball/xorlib/annotation_processor")
//    var classFiles = classesDir.getFiles().findAll { it.name.endsWith('.java') }
//    classFiles.each {
//        var path = it.path
//        var offset = path.indexOf("xkball")
//        if(offset >= 0) target.text += path.substring(offset-4,path.length()-5).replace("\\",".").replace("/",".") + '\n'
//    }
//    inputs.dir file("src/main/java")
//    outputs.file target
}

tasks.named("processResources",ProcessResources) {
    //dependsOn generateAnnotationProcessorServicesFile
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    exclude 'META-INF/services/javax.annotation.processing.Processor'
}

tasks.named("shadowJar", ShadowJar){
    exclude 'net/minecraft/**'
    relocate "org.ow2", "com.xkball.shadow.org.ow2"
    relocate "org.jetbrains", "com.xkball.shadow.org.jetbrains"
}

jar {
    exclude 'net/minecraft/**'
    manifest {
        attributes(
                "Add-Exports": "jdk.compiler/com.sun.tools.javac.code jdk.compiler/com.sun.tools.javac.tree jdk.compiler/com.sun.tools.javac.util jdk.compiler/com.sun.tools.javac.processing jdk.compiler/com.sun.tools.javac.comp",
                "Add-Opens": "jdk.compiler/com.sun.tools.javac.processing"
        )
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.ow2.asm:asm:9.6'
    implementation 'org.ow2.asm:asm-tree:9.6'
    implementation 'org.ow2.asm:asm-util:9.6'
    implementation 'org.jetbrains:annotations:24.1.0'
    //implementation 'com.github.javaparser:javaparser-core:3.26.2'
    //implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.26.2'
    //不能使用build里刚构建出来的 可能导致没法自持
    annotationProcessor(files('libs/XorLib-0.1.0.jar'))

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'


}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    getSource().files
//    outputs.upToDateWhen { false }
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
//    options.fork = true
//    options.forkOptions.jvmArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED')
//    options.forkOptions.jvmArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED')
//    options.forkOptions.jvmArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED')
//    options.forkOptions.jvmArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED')
//    options.forkOptions.jvmArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED')
//    options.forkOptions.jvmArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED')
//    options.forkOptions.jvmArgs.add('-ea')

    options.compilerArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED')
    options.compilerArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED')
    options.compilerArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED')
    options.compilerArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED')
    options.compilerArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.model=ALL-UNNAMED')
    options.compilerArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED')
    options.compilerArgs.add('--add-exports=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED')
}

tasks.withType(Javadoc).configureEach {
    source = fileTree('src/main/java') {
        include 'com/xkball/xorlib/api/**'
        include 'com/xkball/xorlib/XL.java'
        exclude '**/internal/**'
    }
    options.addBooleanOption('Xdoclint:none', true)
}

publishing { PublishingExtension it ->
    publications {
        release(MavenPublication) {
            from components.java
            groupId = "com.xkball"
            artifactId = 'XorLib'
            pom {
                name = 'XorLib'
                url = "https://github.com/xkball/XorLib"
                description = "Provide some useful annotations and methods for Minecraft Modding."

                licenses {
                    license {
                        name = 'GNU LESSER GENERAL PUBLIC LICENSE Version 3 '
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.html'
                    }
                }

                developers {
                    developer {
                        id = 'xkball'
                        name = 'xkball'
                        email = 'xkball996@gmail.com'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/xkball/XorLib.git'
                    developerConnection = 'scm:git:ssh://github.com:xkball/XorLib.git'
                    url = 'https://github.com/xkball/XorLib/tree/master'
                }
            }
        }
    }

    repositories {
        maven {
            url = layout.buildDirectory.dir('staging-deploy')
        }
    }
}

jreleaser {
    signing {
        active = 'ALWAYS'
        armored = true
    }
    deploy {
        maven {
            mavenCentral {
                sonatype {
                    active = 'ALWAYS'
                    url = 'https://central.sonatype.com/api/v1/publisher'
                    stagingRepository('build/staging-deploy')
                }
            }
//            nexus2 {
//                'maven-central' {
//                    active = 'ALWAYS'
//                    url = 'https://s01.oss.sonatype.org/service/local'
//                    snapshotUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
//                    closeRepository = true
//                    releaseRepository = true
//                    stagingRepository('build/staging-deploy')
//                }
//            }
        }
    }
}